
def calc_radio_transito(modo, mass_fractions, atmosphere, params_basic, params_planet, params_prt):
    """
    Calcula el radio de tránsito a partir del objeto prt guardado en atmosphere usando la función calculate_transit_radii de prt.

    Args: params_basic, params_planet, params_prt, mass_fractions, atmosphere

    Return: Devuelve la longitud de onda en amstrongs y el radio de tránsito en cm
    """

    if modo == 'fastchem':

        # aqui el radio medio de las particulas es cte, pero se puede modificar también
        # (cm) i.e. 0.5 um
        #cloud_particles_mean_radii = {'H2O(s)_crystalline__Mie':  5e-5 * np.ones_like(params_basic.temperatures_K)}  
        # si fuese 1.0 sería una delta, es decir una distribución muy estrecha
        #cloud_particle_radius_distribution_std = 1.05



        wavelengths_amstrongs, radio_transito_cm, _ = atmosphere.calculate_transit_radii(
            temperatures = params_basic.temperatures_K,
            mass_fractions = mass_fractions,
            mean_molar_masses = params_prt.mean_molar_masses,
            reference_gravity = params_planet.reference_gravity_cgs,
            planet_radius = params_planet.planet_radius_jup_mean,
            reference_pressure = params_planet.reference_pressure_bar
            #cloud_particles_mean_radii = cloud_particles_mean_radii,
            #cloud_particle_radius_distribution_std = cloud_particle_radius_distribution_std
            )
        return wavelengths_amstrongs, radio_transito_cm

    elif modo == 'fichero':
        wavelengths_amstrongs, radio_transito_cm, _ = atmosphere.calculate_transit_radii(
            temperatures = params_basic.temperatures_K,
            mass_fractions = mass_fractions,
            mean_molar_masses = params_prt.mean_molar_masses,
            reference_gravity = params_planet.reference_gravity_cgs,
            planet_radius = params_planet.planet_radius_jup_mean,
            reference_pressure = params_planet.reference_pressure_bar
            #cloud_particles_mean_radii = cloud_particles_mean_radii,
            #cloud_particle_radius_distribution_std = cloud_particle_radius_distribution_std
            )
        #print(radio_transito_cm)

        return wavelengths_amstrongs, radio_transito_cm
